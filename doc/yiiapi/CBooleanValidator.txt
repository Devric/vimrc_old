
*CBooleanValidator*   >> |CValidator| >> |CComponent|
===================

 CBooleanValidator validates that the attribute value is either
 |CBooleanValidator::trueValue|  or |CBooleanValidator::falseValue|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<allowEmpty>				*CBooleanValidator::allowEmpty*
 (boolean) whether the attribute value can be null or empty. Defaults to true,
 meaning that if the attribute is empty, it is considered valid.

<falseValue>				*CBooleanValidator::falseValue*
 (mixed) the value representing false status. Defaults to '0'.

<strict>				*CBooleanValidator::strict*
 (boolean) whether the comparison to |CBooleanValidator::trueValue| and
 |CBooleanValidator::falseValue| is strict. When this is true, the attribute
 value and type must both match those of |CBooleanValidator::trueValue| or
 |CBooleanValidator::falseValue|. Defaults to false, meaning only the value
 needs to be matched.

<trueValue>				*CBooleanValidator::trueValue*
 (mixed) the value representing true status. Defaults to '1'.



METHOD DETAILS
------------------------------------------------------------------------------

*CBooleanValidator::clientValidateAttribute*			 public
>
 clientValidateAttribute($object, $attribute)
<
(string) the client-side validation script.

 Returns the JavaScript needed for performing client-side validation.
    [object] (CModel) the data object being validated
    [attribute] (string) the name of the attribute to be validated.


*CBooleanValidator::validateAttribute*				 protected
>
 validateAttribute($object, $attribute)
<
(void)

 Validates the attribute of the object. If there is any error, the error
 message is added to the object.
    [object] (CModel) the object being validated
    [attribute] (string) the attribute being validated



 vim:tw=78:ts=8:ft=help:norl:
